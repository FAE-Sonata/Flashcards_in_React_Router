{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\heyu1\\\\OneDrive\\\\Career\\\\Thinkful\\\\Test_examples\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Decks\\\\DeckView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams, useRouteMatch } from \"react-router-dom\";\nimport { readDeck, listCards } from \"../../utils/api/index\";\nimport DeckCard from \"./DeckCard\";\nimport DeckViewHome from \"./DeckViewHome\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DeckView = () =>\n/* { deckId = { posts: [] }} */\n{\n  _s();\n\n  const history = useHistory();\n  const {\n    url\n  } = useRouteMatch();\n  const DECK_VIEW_URL = url.substr(url.indexOf(\"decks\") - 1);\n  const params = useParams();\n  const deckId = params['deckId'];\n  const [thisDeck, setThisDeck] = useState({});\n  const [deckCards, setDeckCards] = useState([]); // const [error, setError] = useState(undefined);\n\n  useEffect(() => {\n    const abortController = new AbortController(); // readDeck(deckId,\n    //     abortController.signal).then(setThisDeck).catch(setError);\n\n    async function loadDeckAndCards() {\n      try {\n        let deckResponse = await readDeck(deckId, abortController.signal);\n        setThisDeck(deckResponse); // console.log(\"DECK VIEW, fetch cards from response: \", deckResponse['cards']);\n\n        setDeckCards(deckResponse['cards']);\n      } catch (error) {\n        return \"ERROR \" + error; // <ErrorMessage error={error} />;\n      }\n    }\n\n    loadDeckAndCards();\n    return () => {\n      abortController.abort();\n    };\n  }, [deckId]); // useEffect(() => {\n  //     const abortController = new AbortController();\n  //     listCards(deckId,\n  //         abortController.signal).then(setDeckCards).catch(setError);\n  // }, [deckId]);\n  // if (error) {\n  //     return \"ERROR \" + error; // <ErrorMessage error={error} />;\n  // }\n\n  const cardComponents = deckCards.map(cardObj => /*#__PURE__*/_jsxDEV(DeckCard, {\n    cardObj: cardObj,\n    browserHistory: history,\n    deckViewUrl: DECK_VIEW_URL\n  }, cardObj['id'], false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this));\n  /*\r\n  const EDIT_DECK_URL = `${DECK_VIEW_URL}/edit`;\r\n  const CARDS_SUBDIR = `${DECK_VIEW_URL}/cards`;\r\n  const EDIT_CARD_URL = `${CARDS_SUBDIR}/:cardId/edit`;\r\n  const ADD_CARD_URL = `${CARDS_SUBDIR}/new`;\r\n  */\n\n  return (\n    /*#__PURE__*/\n\n    /* col-12 col-md-6 col-xl-3 my-2 */\n    _jsxDEV(\"article\", {\n      className: \"align-self-stretch\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border p-4 h-100 d-flex flex-column\",\n        children: /*#__PURE__*/_jsxDEV(DeckViewHome, {\n          deck: thisDeck,\n          browserHistory: history\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"row\",\n        children: cardComponents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(DeckView, \"gr4VgMG80q7bVROiGg4FOIRya4s=\", false, function () {\n  return [useHistory, useRouteMatch, useParams];\n});\n\n_c = DeckView;\nexport default DeckView;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckView\");","map":{"version":3,"sources":["C:/Users/heyu1/OneDrive/Career/Thinkful/Test_examples/Project_Flashcards_Qualified_1/src/Layout/Decks/DeckView.js"],"names":["React","useEffect","useState","useHistory","useParams","useRouteMatch","readDeck","listCards","DeckCard","DeckViewHome","DeckView","history","url","DECK_VIEW_URL","substr","indexOf","params","deckId","thisDeck","setThisDeck","deckCards","setDeckCards","abortController","AbortController","loadDeckAndCards","deckResponse","signal","error","abort","cardComponents","map","cardObj"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,QAAqD,kBAArD;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,uBAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,OAAO,MAAMC,QAAQ,GAAG;AAAC;AAAoC;AAAA;;AACzD,QAAMC,OAAO,GAAGR,UAAU,EAA1B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAUP,aAAa,EAA7B;AACA,QAAMQ,aAAa,GAAGD,GAAG,CAACE,MAAJ,CAAWF,GAAG,CAACG,OAAJ,CAAY,OAAZ,IAAuB,CAAlC,CAAtB;AAEA,QAAMC,MAAM,GAAGZ,SAAS,EAAxB;AACA,QAAMa,MAAM,GAAGD,MAAM,CAAC,QAAD,CAArB;AACA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,EAAD,CAA1C,CARyD,CASzD;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMqB,eAAe,GAAG,IAAIC,eAAJ,EAAxB,CADY,CAEZ;AACA;;AACA,mBAAeC,gBAAf,GAAkC;AAC9B,UAAI;AACA,YAAIC,YAAY,GAAG,MAAMnB,QAAQ,CAACW,MAAD,EAASK,eAAe,CAACI,MAAzB,CAAjC;AACAP,QAAAA,WAAW,CAACM,YAAD,CAAX,CAFA,CAGA;;AACAJ,QAAAA,YAAY,CAACI,YAAY,CAAC,OAAD,CAAb,CAAZ;AACH,OALD,CAMA,OAAME,KAAN,EAAgB;AACZ,eAAO,WAAWA,KAAlB,CADY,CACa;AAC5B;AACJ;;AACDH,IAAAA,gBAAgB;AAChB,WAAQ,MAAM;AAAEF,MAAAA,eAAe,CAACM,KAAhB;AAAyB,KAAzC;AACH,GAjBQ,EAiBN,CAACX,MAAD,CAjBM,CAAT,CAVyD,CA6BzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMY,cAAc,GAAGT,SAAS,CAACU,GAAV,CAAeC,OAAD,iBACjC,QAAC,QAAD;AACI,IAAA,OAAO,EAAEA,OADb;AAEI,IAAA,cAAc,EAAEpB,OAFpB;AAGI,IAAA,WAAW,EAAEE;AAHjB,KAAekB,OAAO,CAAC,IAAD,CAAtB;AAAA;AAAA;AAAA;AAAA,UADmB,CAAvB;AAKA;AACJ;AACA;AACA;AACA;AACA;;AACI;AAAA;;AACI;AACA;AAAS,MAAA,SAAS,EAAC,oBAAnB;AAAA,8BA0BI;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAA,+BACI,QAAC,YAAD;AACI,UAAA,IAAI,EAAEb,QADV;AAEI,UAAA,cAAc,EAAEP;AAFpB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cA1BJ,eA+BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BJ,eAgCI;AAAS,QAAA,SAAS,EAAC,KAAnB;AAAA,kBAA0BkB;AAA1B;AAAA;AAAA;AAAA;AAAA,cAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAoCE,CArFC;;GAAMnB,Q;UACOP,U,EACAE,a,EAGDD,S;;;KALNM,Q;AAuFb,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport { readDeck, listCards } from \"../../utils/api/index\";\r\nimport DeckCard from \"./DeckCard\";\r\nimport DeckViewHome from \"./DeckViewHome\";\r\n\r\nexport const DeckView = (/* { deckId = { posts: [] }} */) => {\r\n    const history = useHistory();\r\n    const { url } = useRouteMatch();\r\n    const DECK_VIEW_URL = url.substr(url.indexOf(\"decks\") - 1)\r\n    \r\n    const params = useParams();\r\n    const deckId = params['deckId'];\r\n    const [thisDeck, setThisDeck] = useState({});\r\n    const [deckCards, setDeckCards] = useState([]);\r\n    // const [error, setError] = useState(undefined);\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n        // readDeck(deckId,\r\n        //     abortController.signal).then(setThisDeck).catch(setError);\r\n        async function loadDeckAndCards() {\r\n            try {\r\n                let deckResponse = await readDeck(deckId, abortController.signal);\r\n                setThisDeck(deckResponse);\r\n                // console.log(\"DECK VIEW, fetch cards from response: \", deckResponse['cards']);\r\n                setDeckCards(deckResponse['cards']);\r\n            }\r\n            catch(error)    {\r\n                return \"ERROR \" + error; // <ErrorMessage error={error} />;\r\n            }\r\n        }\r\n        loadDeckAndCards();\r\n        return (() => { abortController.abort() });\r\n    }, [deckId]);\r\n\r\n    // useEffect(() => {\r\n    //     const abortController = new AbortController();\r\n    //     listCards(deckId,\r\n    //         abortController.signal).then(setDeckCards).catch(setError);\r\n    // }, [deckId]);\r\n    // if (error) {\r\n    //     return \"ERROR \" + error; // <ErrorMessage error={error} />;\r\n    // }\r\n\r\n    const cardComponents = deckCards.map((cardObj) =>\r\n        <DeckCard key={cardObj['id']}\r\n            cardObj={cardObj}\r\n            browserHistory={history}\r\n            deckViewUrl={DECK_VIEW_URL}/>);\r\n    /*\r\n    const EDIT_DECK_URL = `${DECK_VIEW_URL}/edit`;\r\n    const CARDS_SUBDIR = `${DECK_VIEW_URL}/cards`;\r\n    const EDIT_CARD_URL = `${CARDS_SUBDIR}/:cardId/edit`;\r\n    const ADD_CARD_URL = `${CARDS_SUBDIR}/new`;\r\n    */\r\n    return (\r\n        /* col-12 col-md-6 col-xl-3 my-2 */\r\n        <article className=\"align-self-stretch\">\r\n            {/* <header>\r\n                <NavLink to=\"/\">Home</NavLink> / {thisDeck['name']}\r\n            </header> */}\r\n            {/* OLD ROUTING CODE */}\r\n            {/* <div className=\"border p-4 h-100 d-flex flex-column\">\r\n                <Route exact={true} path={DECK_VIEW_URL}>\r\n                    <DeckViewHome\r\n                        deck={thisDeck}\r\n                        browserHistory={history}/>\r\n                </Route>\r\n                <Route path={EDIT_DECK_URL}>\r\n                    <DeckEdit deckId={deckId} deckName={thisDeck['name']}/>\r\n                </Route>\r\n                <Route path={ADD_CARD_URL}>\r\n                    <AddCard deckName={thisDeck['name']}/>\r\n                </Route>\r\n                <Route path={EDIT_CARD_URL}>\r\n                    <CardEdit deckName={thisDeck['name']}/>\r\n                </Route>\r\n            </div>\r\n            <Route exact={true} path={DECK_VIEW_URL}>\r\n                <h2>Cards</h2>\r\n                <section className=\"row\">{cardComponents}</section>\r\n            </Route> */}\r\n\r\n            <div className=\"border p-4 h-100 d-flex flex-column\">\r\n                <DeckViewHome\r\n                    deck={thisDeck}\r\n                    browserHistory={history}/>\r\n            </div>\r\n            <h2>Cards</h2>\r\n            <section className=\"row\">{cardComponents}</section>\r\n        </article>\r\n    )};\r\n\r\nexport default DeckView;"]},"metadata":{},"sourceType":"module"}